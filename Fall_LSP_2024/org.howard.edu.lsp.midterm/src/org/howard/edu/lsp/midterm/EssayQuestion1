Question1:
Part A: The UserFitness class has low cohesion because it is responsible for handling unrelated tasks,
which should be separated into different classes based on how well they function.
Specifically:
Daily Workout Tracking
Nutrition Tracking 
User Profile Information 
Fitness Reporting
These tasks belong to different parts of fitness management and are only barely related. 
The class is taking on too many responsibilities, 
which violates the Single Responsibility Principle, and makes the class harder to maintain or extend.
Part B: UserProfile Class:
This class would focus on storing and managing the user's personal information, such as userName, userAge, weight, and height.
WorkoutTracker Class: 
This class would handle workout-related information, such as dailySteps, workoutType, and caloriesBurned. 
It could provide methods like logWorkout and logSteps to track the user's physical activities.
NutritionTracker Class:
This class would manage nutrition data like caloriesConsumed and meals. It would contain methods like logMeal to track daily caloric intake.
FitnessReport Class:
This class could handle generating reports from the data in the other classes. 
It would combine data from UserProfile, WorkoutTracker, and NutritionTracker to provide a comprehensive report.

Question 2:
Part A: The Student class should likely be an abstract class because it seems that Student will contain some common properties
and behaviors that all student subclasses will inherit. However, Student might not need to be instantiated on its own.
Part B: The flaw in the removeThirdYears method comes from the fact that modifying a list while iterating over it can cause issues. 
This is because the list's structure changes during iteration, which invalidates the iterator. 
According to Arthur Riel's heuristics, a class should not modify a collection while traversing it.

Question 3:
No, the BankAccount class is not well-encapsulated. The issues with the current BankAccount class are
Public Fields because
The fields accountHolderName, accountNumber, balance, and interestRate are all public. 
This means that they can be directly accessed and modified from outside the class, violating the principle of encapsulation.
Also, The class exposes its state directly, without providing access control, which could lead to problems in the object's.
I would probably make the variables private, control modifications, and hide implementation details.

Question 4:
The trim level is a part of the class inheritance hierarchy, making it impossible to change the trim level dynamically at runtime. 
Changing the trim level would require creating a new object of another subclass, 
which isn't ok if the goal is to modify an existing car's quality without recreating it.